#----------------------------------------------------------------------------------------------------------
# Git Commands
#----------------------------------------------------------------------------------------------------------

git config: This command sets the author name and email address respectively to be used with your commits
      # git config –global user.name "ahfitwi"; 
      # git config –global user.email “ahfitwi@gmail.com”
git init: This command is used to start a new repository.
      # git init [repository name]
      # git init C:\Users\ahfitwi\Documents\GitHub\HelpfulMaterials
      # $ cd ~/Documents/Github/alemb
      # $ git initgi
      # Reinitialized existing Git repository in C:/Users/ahfitwi/Documents/GitHub/alemb/.git/
git clone: This command is used to obtain a repository from an existing URL.
      # git clone [url]
      # git clone https://github.com/ahfitwi/PyAutomation.git
git add: This command adds a file to the staging area.
      # git add [file]  
      # git add gitcmds.txt
git commit: This command records or snapshots the file permanently in the version history.
      # git commit -m “[ Type in the commit message]” 
      # git commit -a : This command commits any files you’ve added with the git add command and also commits any files you’ve changed since then.
git diff: This command shows the file differences which are not yet staged.
      # git diff –staged: This command shows the differences between the files in the staging area and the latest version present.
git reset: This command unstages the file, but it preserves the file contents.
      # git reset [file]
      # git reset gitcmds.txt
      # git reset [commit]: This command undoes all the commits after the specified commit and preserves the changes locally.
      # git reset 78fs86sfsf67sf8s76f7sf7sf67sf67s6f7s8
      # git reset –hard [commit]: This command discards all history and goes back to the specified commit.
git status: This command lists all the files that have to be committed.
      # git status
git rm: This command deletes the file from your working directory and stages the deletion.
      # git rm [file] 
      # git rm gitcmds.txt
git log: This command is used to list the version history for the current branch.
      # git log
      # git log –follow[file]: this command lists version history for a file, including the renaming of files also.
      # git log --follow gitcmds.txt
git show: This command shows the metadata and content changes of the specified commit
      # git show [commit]
      # git show 78fs86sfsf67sf8s76f7sf7sf67sf67s6f7s8
git tag: This command is used to give tags to the specified commit.
      # git tag [commitID]
      # git tag 78fs86sfsf67sf8s76f7sf7sf67sf67s6f7s8
git branch: This command lists all the local branches in the current repository.
      # git branch
      # git branch [branch name]: git branch branch_1 --> This command creates a new branch.
      # git branch -d [branch name]: This command deletes the feature branch.
git checkout: This command is used to switch from one branch to another.
      # git checkout [branch name]: git checkout branch_1
      # git checkout -b [branch name]: This command creates a new branch and also switches to it.
git merge: This command merges the specified branch’s history into the current branch.
      # git merge [branch name]: git merge branch_2
git remote: This command is used to connect your local repository to the remote server.
      # git remote add [variable name] [Remote Server Link]
      # git remote add origin https://github.com/ahfitwi/PyAutomation.git
git push: This command sends the committed changes of master branch to your remote repository.
      # git push [variable name] master
      # git push origin master
      # git push [variable name] [branch]: This command sends the branch commits to your remote repository.
      # git push origin master
      # git push –all [variable name]: This command pushes all branches to your remote repository.
      # git push --all origin
      # git push [variable name] :[branch name]: This command deletes a branch on your remote repository.
      # git push origin : branch_2
git pull: This command fetches and merges changes on the remote server to your working directory.
      # git pull [Repository Link] 
      # git pull https://github.com/ahfitwi/PyAutomation.git
git stash: This command temporarily stores all the modified tracked files.
      # git stach save
      # git stash pop: This command restores the most recently stashed files.
      # git stash list: This command lists all stashed changesets.
      # git stash drop: This command discards the most recently stashed changeset
#----------------------------------------------------------------------------------------------------------
# Steps to create GITHUB SSH Keys
#----------------------------------------------------------------------------------------------------------
1. Open Git Bash.
2. Paste the text below, substituting in your GitHub email address.
            $ ssh-keygen -t ed25519 -C "ahfitwi@gmail.com"
     - Note: If you are using a legacy system that doesn't support the Ed25519 algorithm, use:
            $ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
     -  This creates a new SSH key, using the provided email as a label.
             > Generating public/private algorithm key pair.
               Generating public/private ed25519 key pair.
3. When you're prompted to "Enter a file in which to save the key," press Enter. This accepts the default file location.

      - Enter file in which to save the key (/c/Users/ahfitwi/.ssh/id_ed25519):
      - Enter passphrase (empty for no passphrase):metaEG0822
      - Enter same passphrase again:metaEG0822
      - Your identification has been saved in /c/Users/ahfitwi/.ssh/id_ed25519.
      - Your public key has been saved in /c/Users/ahfitwi/.ssh/id_ed25519.pub.
      - The key fingerprint is:
            SHA256:NIvlsjsuNGD7UfXpZ/FMyCsfRgv+aXl2oan73XJglIg ahfitwi@gmail.com
            The key's randomart image is:
                              +--[ED25519 256]--+ | | | . | | .+. + o . | | o .= oE * + | | . o .o So o O | | . + o + B =. | | o o. B =o..| | o .. *o= +| | oo. +++ =.| +----[SHA256]-----+

      - At the prompt, type a secure passphrase. For more information, see "Working with SSH key passphrases."
            - Enter passphrase (empty for no passphrase): [Type a passphrase]
            - Enter same passphrase again: [Type passphrase again]

4. Ensure the ssh-agent is running. You can use the "Auto-launching the ssh-agent" instructions in "Working with SSH key passphrases", or start it manually:
            $ eval "$(ssh-agent -s)"
            Agent pid 7628
5. Add your SSH private key to the ssh-agent. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_ed25519 in the command with the name of your private key file.
            $ ssh-add ~/.ssh/id_ed25519
            Enter passphrase for /c/Users/ahfitwi/.ssh/id_ed25519:
            Identity added: /c/Users/ahfitwi/.ssh/id_ed25519 (ahfitwi@gmail.com)
6. Add the SSH key to your account on GitHub. For more information, see "Adding a new SSH key to your GitHub account."
            $ clip < ~/.ssh/id_ed25519.pub
            $ cat ~/.ssh/id_ed25519.pub | clip
7. Paste your key into the "Key" field.
            ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIO7srV4vMLV09uv/8Z+pktnl9O4X6LXgLVFZe90vsrvS ahfitwi@gmail.com
8. Click Add SSH key.
             click on "Add SSH Key" button
             
#----------------------------------------------------------------------------------------------------------
# Commands
#----------------------------------------------------------------------------------------------------------
- Here are the commands I often use to create a branch on Github
    - First Navigate to Main
    - Create New Branch: 
        - git branch -C alemb
    - List Branches
        - git branch
    - Switch to Branch
        - git checkout alemb
        - git add file_name ... or git add. (or git add foldername/)
    - Status
        - git status
    - Commit Changes
        - git commit -m "Add Message Here"
    - Push Changes to github
        - git push origin head
    - Switch to main
        - git checkout main
        
**NB**: I can't create branch on your main (XX's) because I don't have that privilege!

#----------------------------------------------------------------------------------------------------------
# Commands
#----------------------------------------------------------------------------------------------------------
Normally:

0. Git version
    - git --version
1. CD to the github on local disk
    - git init #if the first time
2. Hook the remote url to the local file/repo
    - git remote add origin https://github.com/ahfitwi/PyAutomation.git
    - git remote set-url origin https://github.com/ahfitwi/PyAutomation.git
3. Check Status
    - git status
4. Adding/ staging Files
    - git add folder\ or file.py or . # period to add all files
5. Once files are staged, commit
    - git commit -m "Add Text Message here"
6. Push 
    - git push -u origin main/master 
    - git push origin head
7.  pull
    - git pull origin main
